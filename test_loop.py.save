from srl_vs_rdn import SrlEnvTest
import random
import numpy as np

from pdb import set_trace as st

NACTIONS = 28561  # Number of lines in openIE input file.

def rdn_range(a, b, N=10, repl=False):
    """
    This method generates tuples of random pairs for n-gram ranges.
    The parameters must meet

        N < (((a - b) ** 2) - (a - b)) / 2

    where a < b are the interval's start and end, respectively. N is
    the desired number of pair tuples of integers.
    """
    possible = []
    n = (a - b)
    n = ((n ** 2) - n) / 2
    if n < N:
        print(
            "ERROR: N = {}, and (((a - b) ** 2) - (a - b)) / 2 = {}" \
                .format(N, n))
        return "ERROR"
    for x in range(a, b):
        for y in range(a, b):
            xy = tuple(sorted((x, y)))
            if x != y and (not xy in possible if repl else True):
                possible.append(xy)

    return possible
        #yield tup

def rdn_ranges(a, b, N):
    from random import randint
    i = 0
    trials = []
    while i < N:
        x, y = randint(a, b), randint(a, b)
        if 
        trials.append


def test_settings(n_tests, max_tests, ranges=dict(
        bias=(0.0, 10.0),
        hitmiss=(0.1, 1.0),
        bw=(1.0, 5.0),
        density=('expset', 'guasset'),
        ngrams={'low': 1, 'high': 5} )):
    """
    Generate random parameters:
        bias=3.0, hitmiss=0.3, bw=5.0,
        density='expset', ngrams={'low': 1, 'high': 5}
    """
    settings = {}
    for p, v in ranges.items():
        if not isinstance(v, dict):
            if not isinstance(v[0], str):
                settings[p] = np.random.choice(np.linspace(v[0], v[1], max_tests),
                                 n_tests, p=[1.0/max_tests] * max_tests)
            else:
                settings[p] = np.random.choice(v, n_tests,
                                               p=[1.0/len(v)] * len(v)).tolist()
        else:
            st()
            settings[p] = rdn_range(v['low'], v['high'], N=n_tests)

    for s in settings:
        yield s
        
        
        

def main():
    in_text = "data/dis_train_.txt"
    in_open = "data/dis_train.txt.oie"
    rdn_win = 8  # 6 + 2 (mean + std)
    sampran = (10, 500)  # sample range
    n_steps = 30
    samples = int((sampran[1] - sampran[0]) * 0.3)
    n_tests = 10 

    settings = test_settings(n_tests, 80)
    
    for s in random.sample(range(sampran[0], sampran[1]), samples):
        nsteps = int(float(NACTIONS)/float(s))
        out_dir = ("../results_srl_env/wsize-"
                        + str(rdn_win) + "/sample-" + str(s))
        test = SrlEnvTest(in_oie=in_open, in_txt=in_text, output_dir=out_dir,
                        wsize=rdn_win, sample=s, nsteps=nsteps)
        for param in settings:
            st()
            test.fit(**param)


if __name__ == "__main__":
    main()
